- content_for :extra_javascript do
  = javascript_include_tag "http://maps.google.com/maps/api/js?sensor=true"
  = javascript_include_tag "http://code.google.com/apis/gears/gears_init.js"
  = javascript_include_tag 'markerclusterer.js'

- content_for :extra_javascript do
  :javascript
    var initialLocation;
    var map;
    var helsinki = new google.maps.LatLng(60.2, 24.9);
    var browserSupportFlag =  new Boolean();
    var listing_type = "#{params[:listing_type]}";
    var listing_style = "#{@listing_style}";
    var listing_category = ["all"];
    var listing_sharetypes = ["all"];
    var listing_tags = [];
    
    var infowindow = new google.maps.InfoWindow();
    var directionsService = new google.maps.DirectionsService();
    var directionsDisplay = new google.maps.DirectionsRenderer();
    directionsDisplay.setOptions( { suppressMarkers: true } );
    var flagMarker = new google.maps.Marker();
    markers = [];
    markerContents = [];
    markersArr = [];   // Array for keeping track of markers on map
    showingMarker = "";
    markerCluster = null;

    function initialize() {
      var myOptions = {
        zoom: 10,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
      
      // Try W3C Geolocation (Preferred)
      if(navigator.geolocation) {
        browserSupportFlag = true;
        navigator.geolocation.getCurrentPosition(function(position) {
          initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
          map.setCenter(initialLocation);
        }, function() {
          handleNoGeolocation(browserSupportFlag);
        });
      // Try Google Gears Geolocation
      } else if (google.gears) {
        browserSupportFlag = true;
        var geo = google.gears.factory.create('beta.geolocation');
        geo.getCurrentPosition(function(position) {
          initialLocation = new google.maps.LatLng(position.latitude,position.longitude);
          map.setCenter(initialLocation);
        }, function() {
          handleNoGeoLocation(browserSupportFlag);
        });
      // Browser doesn't support Geolocation
      } else {
        browserSupportFlag = false;
        handleNoGeolocation(browserSupportFlag);
      }
      
      function handleNoGeolocation(errorFlag) {
        if (errorFlag == true) {
          alert("Geolocation service failed.");
          initialLocation = helsinki;
        } else {
          alert("Your browser doesn't support geolocation. We've placed you in Helsinki.");
          initialLocation = helsinki;
        }
        map.setCenter(initialLocation);
      }
      google.maps.event.addListenerOnce(map, 'tilesloaded', addListingMarkers);
    }
    
    
    function addListingMarkers() {
      // Test requesting location data
      // Now the request_path needs to also have a query string with the wanted parameters
      
      
      markerContents = [];
      markers = [];
      $.get('/en/listings_bubbles/all',{ listing_type: listing_type, 'category[]': listing_category, 'share_type[]': listing_sharetypes, 'tag[]': listing_tags }, function(data){
        var data_arr = data.info;
    		for (i in data_arr) {
          var contentString = '<div style="background-color:#F7F5E6">'+data_arr[i]+'</div>';
          markerContents[i]=contentString;
        }
      });
      
      var request_path = '/api/query'
    	$.get(request_path, { listing_type: listing_type, 'category[]': listing_category, 'share_type[]': listing_sharetypes, 'tag[]': listing_tags }, function(data) {	

    	  var data_arr = data.data;
        
    		for (i in data_arr) {
    		  (function() {
    		    var entry = data_arr[i];
    		    if (entry["location"] || entry["origin_loc"]) {
    		      var location;
    		      if (entry["category"]=="rideshare")
    		        location = new google.maps.LatLng(entry["origin_loc"]["latitude"], entry["origin_loc"]["longitude"]);
    		      else
    		        location = new google.maps.LatLng(entry["location"]["latitude"], entry["location"]["longitude"]);
    		      
              var marker = new google.maps.Marker({
                position: location,
                title: entry["title"],
                //map: map,
                icon: '/images/map_icons/'+entry["category"]+'_'+entry["listing_type"]+'.png'
              });
              markers.push(marker);
              markersArr.push(marker);
              var ind = i;
              google.maps.event.addListener(marker, 'click', function() {
                infowindow.close();
                directionsDisplay.setMap(null);
                flagMarker.setOptions({map:null});
                if (showingMarker==marker.getTitle())
                  showingMarker = "";
                else {
                  showingMarker = marker.getTitle();
                  if (markerContents[ind]) {
                    infowindow.setContent(markerContents[ind]);
                    infowindow.open(map,marker);
                  }
                  else {
                    $.get('/en/listings_bubbles'+entry["id"], function(data){
                      var content = '<div style="background-color:#F7F5E6">'+data+'</div>';
                      infowindow.setContent(content);
                      infowindow.open(map,marker);
                    });
                  }
                  
                  if (entry["category"]=="rideshare") {
                    var end = new google.maps.LatLng(entry["destination_loc"]["latitude"], entry["destination_loc"]["longitude"]);
                    var request = {
                      origin:location, 
                      destination:end,
                      travelMode: google.maps.DirectionsTravelMode.DRIVING
                    };
                    directionsDisplay.setMap(map);
                    directionsService.route(request, function(response, status) {
                      if (status == google.maps.DirectionsStatus.OK) {
                        directionsDisplay.setDirections(response);
                      }
                    });
                    flagMarker.setOptions({
                      position: end,
                      map: map,
                      icon: '/images/map_icons/flag_rideshare.png'
                    });
                  }
                }
              });
              google.maps.event.addListener(infowindow, 'closeclick', function() {
                showingMarker = "";
              });
            }
          })();
        }
        markerCluster = new MarkerClusterer(map, markers, markerContents, infowindow, showingMarker, {
        imagePath: '/images/map_icons/group_'+listing_type});

    	});
    }
    
    function clearMarkers() {
        if (markersArr) {
            for (i in markersArr) {
                markersArr[i].setMap(null);
            }
        }
        directionsDisplay.setMap(null);
        flagMarker.setOptions({map:null});
        if (markerCluster) {
            markerCluster.resetViewport(true);
            markerCluster.clearMarkers();
            delete markerCluster;
            markerCluster = null;
        }
        if (markers) {
            for (n in markers) {
                markers[n].setMap(null);
            }
        }
    }
    
    
    // Simple callback for passing filter changes to the mapview
    function filtersUpdated(category, sharetypes, tags) {
        listing_category = category;
        listing_sharetypes = sharetypes;
        listing_tags = tags;
        clearMarkers();
        addListingMarkers();
    }

    google.maps.event.addDomListener(window, 'load', initialize);

#map-canvas{:style => "width: 100%; height: 500px"}

