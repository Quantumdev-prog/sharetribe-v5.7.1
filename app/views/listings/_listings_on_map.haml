- content_for :extra_javascript do
  = javascript_include_tag "http://maps.google.com/maps/api/js?sensor=true"
  = javascript_include_tag "http://code.google.com/apis/gears/gears_init.js"
  = javascript_include_tag 'markerclusterer.js'

- content_for :extra_javascript do
  :javascript
    var initialLocation;
    var map;
    var helsinki = new google.maps.LatLng(60.2, 24.9);
    var browserSupportFlag =  new Boolean();
    var listing_type = "#{params[:listing_type]}";

    function initialize() {
      var myOptions = {
        zoom: 10,
        mapTypeId: google.maps.MapTypeId.ROADMAP
      };
      map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
      
      // Try W3C Geolocation (Preferred)
      if(navigator.geolocation) {
        browserSupportFlag = true;
        navigator.geolocation.getCurrentPosition(function(position) {
          initialLocation = new google.maps.LatLng(position.coords.latitude,position.coords.longitude);
          map.setCenter(initialLocation);
        }, function() {
          handleNoGeolocation(browserSupportFlag);
        });
      // Try Google Gears Geolocation
      } else if (google.gears) {
        browserSupportFlag = true;
        var geo = google.gears.factory.create('beta.geolocation');
        geo.getCurrentPosition(function(position) {
          initialLocation = new google.maps.LatLng(position.latitude,position.longitude);
          map.setCenter(initialLocation);
        }, function() {
          handleNoGeoLocation(browserSupportFlag);
        });
      // Browser doesn't support Geolocation
      } else {
        browserSupportFlag = false;
        handleNoGeolocation(browserSupportFlag);
      }
      
      function handleNoGeolocation(errorFlag) {
        if (errorFlag == true) {
          alert("Geolocation service failed.");
          initialLocation = helsinki;
        } else {
          alert("Your browser doesn't support geolocation. We've placed you in Helsinki.");
          initialLocation = helsinki;
        }
        map.setCenter(initialLocation);
      }
      google.maps.event.addListenerOnce(map, 'tilesloaded', addListingMarkers);
    }
    
    
    function addListingMarkers() {
      // The following two statements had Ruby evaluations, but they did not work with the current implementation
      //var lat = Location.first.latitude;
      //var lng = Location.first.longitude;
      
      // Test requesting location data
      // Now the request_path needs to also have a query string with the wanted parameters
      var request_path = '/api/query?listing_type=offer&category=item'
    	$.get(request_path, function(data) {	
    	
    	  var data_arr = data["data"];
    	  var infowindow = new google.maps.InfoWindow();
    	  var directionsService = new google.maps.DirectionsService();
        var directionsDisplay = new google.maps.DirectionsRenderer();
        directionsDisplay.setOptions( { suppressMarkers: true } );
        var flagMarker = new google.maps.Marker();
        var markers = [];
        var markerContents = [];
        var lastMarker = null;
    		for (i in data_arr) {
    		  (function() {
    		    var entry = data_arr[i];
    		    if (entry["location"]) { //////////
        		var location = new google.maps.LatLng(entry["location"]["latitude"], entry["location"]["longitude"]);
        		var action;
        		if (entry["category"]=="housing") action = "Reply";
        		else if (entry["listing_type"]=="offer") {
        		  action = "Request ";
        		  if (entry["category"]=="rideshare") action += "ride"; 
        		  else action += entry["category"];
        		}
        		else if (entry["listing_type"]=="request") {
        		  action = "Offer ";
        		  if (entry["category"]=="rideshare") action += "a ride"; 
        		  else if (entry["category"]=="favor") action += "your help";
        		  else if (entry["category"]=="item") action += "your item";
        		}
        		
        		var typeTags = '';
        		for (j in entry["share_types"]) {
        		  typeTags += '<div class="recent_listing_tag"><a href="#">'+entry["share_types"][j]+'</a></div>';
        		}
        		
        		var contentString = '<div class="recent_listing" style="width:395px; background-color:#F7F5E6">'+
                                '<div class="listing_image">'+
                                '<div class="listing_image_'+entry["category"]+'">'+
                                '<a href="#" title="Item '+entry["listing_type"]+': '+entry["title"]+'">#</a>'+
                                '</div></div>'+
                                '<div class="recent_listing_text" style="width:300px">'+
                        				'<h5><a href="#">'+entry["title"]+'</a></h5>'+
                        				typeTags+
                        				'<p class="description">'+
                        				entry["description"]+
                                '</p>'+
                                '<div class="float_left" style="width:160px">'+
                                '<a href="#">'+action+' </a>'+
                                '&nbsp;|&nbsp;'+
                                '<a href="#comment_form">Comment</a>'+
                                '</div>'+
                                '<div class="float_right" style="width:140px">'+
                                '<span>'+
                                '<a href="/en/people/#">Username</a>'+
                                '&nbsp;'+entry["created_at"]+
                                '</span>'+
                                '</div></div></div>'; 

            var marker = new google.maps.Marker({
              position: location,
              title: "close",
             // map: map,
              icon: '/images/map_icons/'+entry["category"]+'_'+entry["listing_type"]+'.png'
            });
            markers.push(marker);
            markerContents.push(contentString);
            google.maps.event.addListener(marker, 'click', function() {
              infowindow.close();
              directionsDisplay.setMap(null);
              flagMarker.setOptions({map:null});
              if (marker.getTitle()!="close") 
                marker.setTitle("close");
              else {
                if (lastMarker) lastMarker.setTitle("close");
                marker.setTitle("open");
                lastMarker = marker;
                infowindow.setContent(contentString);
                infowindow.open(map,marker);
                
                if (entry["category"]=="rideshare") {
                  var end = new google.maps.LatLng(entry["latdest"], entry["lngdest"]);
                  var request = {
                    origin:location, 
                    destination:end,
                    travelMode: google.maps.DirectionsTravelMode.DRIVING
                  };
                  directionsDisplay.setMap(map);
                  directionsService.route(request, function(response, status) {
                    if (status == google.maps.DirectionsStatus.OK) {
                      directionsDisplay.setDirections(response);
                    }
                  });
                  flagMarker.setOptions({
                    position: end,
                    map: map,
                    icon: '/images/map_icons/flag_rideshare.png'
                  });
                }
              }
            });
            google.maps.event.addListener(infowindow, 'closeclick', function() {
              lastMarker.setTitle("close");
            });
          } ///////////////////////////////////////
          })();
        }
        var markerCluster = new MarkerClusterer(map, markers, markerContents, infowindow, lastMarker, {
        imagePath: '/images/map_icons/group_'+listing_type});
    	});
    }

    google.maps.event.addDomListener(window, 'load', initialize);

#map-canvas{:style => "width: 100%; height: 500px"}

